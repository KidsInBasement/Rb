-- AIM System (External Script)
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local player = Players.LocalPlayer

local Aim = {
    Enabled = false,
    TeamCheck = true,
    VisibilityCheck = true,
    AimPart = "Head",
    FOV = 80,
    ShowFOV = true,
    CurrentKey = "None",
    AimKey = nil,
    KeybindListening = false,
}

local FOVCircle = Drawing.new("Circle")
FOVCircle.Visible = false
FOVCircle.Radius = Aim.FOV
FOVCircle.Color = Color3.fromRGB(255, 255, 255)
FOVCircle.Thickness = 1
FOVCircle.Transparency = 1
FOVCircle.Filled = false
FOVCircle.NumSides = 64

-- Get closest player for aimbot
local function GetClosestPlayer()
    local closestPlayer = nil
    local shortestDistance = Aim.FOV
    
    for _, v in pairs(Players:GetPlayers()) do
        if v ~= player and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
            -- Team check
            if Aim.TeamCheck and v.Team and player.Team and v.Team == player.Team then 
                continue 
            end
            
            local targetPart = v.Character:FindFirstChild(Aim.AimPart)
            if not targetPart then continue end
            
            local screenPos = Camera:WorldToScreenPoint(targetPart.Position)
            if screenPos.Z > 0 then
                local mousePos = UserInputService:GetMouseLocation()
                local distance = (Vector2.new(screenPos.X, screenPos.Y) - mousePos).Magnitude
                
                -- Only proceed if distance is within FOV
                if distance < shortestDistance then
                    -- Visibility check
                    if Aim.VisibilityCheck then
                        -- Cast a ray from camera to target
                        local raycastParams = RaycastParams.new()
                        raycastParams.FilterDescendantsInstances = {player.Character, v.Character}
                        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
                        
                        local rayOrigin = Camera.CFrame.Position
                        local rayDirection = (targetPart.Position - rayOrigin).Unit * (rayOrigin - targetPart.Position).Magnitude
                        local raycastResult = workspace:Raycast(rayOrigin, rayDirection, raycastParams)
                        
                        -- If ray hits nothing or hits the target player, then visible
                        if not raycastResult or raycastResult.Instance:IsDescendantOf(v.Character) then
                            closestPlayer = v
                            shortestDistance = distance
                        end
                    else
                        -- No visibility check needed
                        closestPlayer = v
                        shortestDistance = distance
                    end
                end
            end
        end
    end
    return closestPlayer
end

-- AIM Loop
RunService.RenderStepped:Connect(function()
    FOVCircle.Position = UserInputService:GetMouseLocation()
    FOVCircle.Radius = Aim.FOV
    FOVCircle.Visible = Aim.ShowFOV and Aim.Enabled
    
    local keyPressed = false
    if Aim.AimKey then
        -- Handle mouse buttons first
        if Aim.CurrentKey == "MB1" then
            keyPressed = UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
        elseif Aim.CurrentKey == "MB2" then
            keyPressed = UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2)
        elseif Aim.CurrentKey == "MB3" then
            keyPressed = UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton3)
        else
            -- Handle keyboard keys
            keyPressed = UserInputService:IsKeyDown(Aim.AimKey)
        end
    end
    
    if Aim.Enabled and keyPressed then
        local target = GetClosestPlayer()
        if target and target.Character then
            local targetPart = target.Character:FindFirstChild(Aim.AimPart)
            if targetPart then
                Camera.CFrame = CFrame.new(Camera.CFrame.Position, targetPart.Position)
            end
        end
    end
end)

-- Initialize AIM Tab UI
local function InitializeAimTab(aimContainer, featureStates, TweenService)
    -- Aimbot Toggle
    local aimToggle, aimKeybind = createToggle(
        aimContainer,
        "Aimbot",
        Aim.Enabled,
        function(state)
            Aim.Enabled = state
            if toggleComponents["Aimbot"] and toggleComponents["Aimbot"].slider then
                local slider = toggleComponents["Aimbot"].slider
                local newPosition = state and UDim2.new(1, -25, 0, 1) or UDim2.new(0, 2, 0, 1)
                slider.Position = newPosition
                slider.BackgroundColor3 = state and Color3.fromRGB(255, 165, 0) or Color3.new(1, 1, 1)
            end
        end,
        true,
        "Aimbot"
    )

    -- Aimbot Keybind
    aimKeybind.MouseButton1Click:Connect(function()
        aimKeybind.Text = "..."
        local connection
        connection = UserInputService.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.Keyboard then
                Aim.CurrentKey = input.KeyCode.Name
                Aim.AimKey = input.KeyCode
                aimKeybind.Text = input.KeyCode.Name
                connection:Disconnect()
            elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
                Aim.CurrentKey = "MB1"
                Aim.AimKey = input.UserInputType
                aimKeybind.Text = "MB1"
                connection:Disconnect()
            elseif input.UserInputType == Enum.UserInputType.MouseButton2 then
                Aim.CurrentKey = "MB2"
                Aim.AimKey = input.UserInputType
                aimKeybind.Text = "MB2"
                connection:Disconnect()
            elseif input.UserInputType == Enum.UserInputType.MouseButton3 then
                Aim.CurrentKey = "MB3"
                Aim.AimKey = input.UserInputType
                aimKeybind.Text = "MB3"
                connection:Disconnect()
            end
        end)
    end)
    aimKeybind.Text = Aim.CurrentKey

    -- Team Check Toggle
    createToggle(
        aimContainer,
        "Team Check",
        featureStates.TeamCheck,
        function(state)
            featureStates.TeamCheck = state
            Aim.TeamCheck = state
        end,
        false,
        "TeamCheck"
    )

    -- Visibility Check Toggle
    createToggle(
        aimContainer,
        "Visibility Check",
        featureStates.VisibilityCheck,
        function(state)
            featureStates.VisibilityCheck = state
            Aim.VisibilityCheck = state
        end,
        false,
        "VisibilityCheck"
    )

    -- Show FOV Toggle
    createToggle(
        aimContainer,
        "Show FOV",
        featureStates.ShowFOV,
        function(state)
            featureStates.ShowFOV = state
            Aim.ShowFOV = state
            FOVCircle.Visible = state
        end,
        false,
        "ShowFOV"
    )

    -- FOV Slider
    createSlider(
        aimContainer,
        "FOV Radius",
        10,
        500,
        Aim.FOV,
        function(value)
            Aim.FOV = value
            FOVCircle.Radius = value
        end
    )
end

return {
    Aim = Aim,
    FOVCircle = FOVCircle,
    InitializeAimTab = InitializeAimTab
}
